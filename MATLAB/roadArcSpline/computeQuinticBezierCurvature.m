function curvatures = computeQuinticBezierCurvature(P_zero, P_one, P_two, P_three, P_four, P_five, t)
    % Compute the first and second derivatives of the quintic BÃ©zier curve
    B_x = (1-t).^5 * P_zero(1) + 5*t.*(1-t).^4*P_one(1) + 10*t.^2.*(1-t).^3*P_two(1) + ...
          10*t.^3.*(1-t).^2*P_three(1) + 5*t.^4.*(1-t)*P_four(1) + t.^5*P_five(1);
    B_y = (1-t).^5 * P_zero(2) + 5*t.*(1-t).^4*P_one(2) + 10*t.^2.*(1-t).^3*P_two(2) + ...
          10*t.^3.*(1-t).^2*P_three(2) + 5*t.^4.*(1-t)*P_four(2) + t.^5*P_five(2);
      
    dB_x = -5*(1-t).^4 * P_zero(1) + 5*(1-t).^4 * P_one(1) + ...
           20*t.*(1-t).^3*P_one(1) - 20*t.*(1-t).^3*P_two(1) + ...
           30*t.^2.*(1-t).^2*P_two(1) - 30*t.^2.*(1-t).^2*P_three(1) + ...
           20*t.^3.*(1-t)*P_three(1) - 20*t.^3.*(1-t)*P_four(1) + ...
           5*t.^4 * P_four(1) - 5*t.^4 * P_five(1);

    dB_y = -5*(1-t).^4 * P_zero(2) + 5*(1-t).^4 * P_one(2) + ...
           20*t.*(1-t).^3*P_one(2) - 20*t.*(1-t).^3*P_two(2) + ...
           30*t.^2.*(1-t).^2*P_two(2) - 30*t.^2.*(1-t).^2*P_three(2) + ...
           20*t.^3.*(1-t)*P_three(2) - 20*t.^3.*(1-t)*P_four(2) + ...
           5*t.^4 * P_four(2) - 5*t.^4 * P_five(2);
       
    ddB_x = 20*(1-t).^3 * P_zero(1) - 40*(1-t).^3 * P_one(1) + 20*(1-t).^3 * P_two(1) + ...
            60*t.*(1-t).^2*P_one(1) - 120*t.*(1-t).^2*P_two(1) + 60*t.*(1-t).^2*P_three(1) + ...
            60*t.^2.*(1-t)*P_two(1) - 120*t.^2.*(1-t)*P_three(1) + 60*t.^2.*(1-t)*P_four(1) + ...
            20*t.^3 * P_three(1) - 40*t.^3 * P_four(1) + 20*t.^3 * P_five(1);
    
    ddB_y = 20*(1-t).^3 * P_zero(2) - 40*(1-t).^3 * P_one(2) + 20*(1-t).^3 * P_two(2) + ...
            60*t.*(1-t).^2*P_one(2) - 120*t.*(1-t).^2*P_two(2) + 60*t.*(1-t).^2*P_three(2) + ...
            60*t.^2.*(1-t)*P_two(2) - 120*t.^2.*(1-t)*P_three(2) + 60*t.^2.*(1-t)*P_four(2) + ...
            20*t.^3 * P_three(2) - 40*t.^3 * P_four(2) + 20*t.^3 * P_five(2);

    % Compute the curvature
    curvatures = (dB_x .* ddB_y - dB_y .* ddB_x) ./ (dB_x.^2 + dB_y.^2).^(3/2);
end