function curvature = computeBezierCurvature(t, P_zero, P_one, P_two, P_three, P_four, P_five)
    % Compute the first derivative of the Bézier curveclothoid_GT.allX
    dP_dt = ...
        -5 * (1-t).^4 * P_zero + ...
        (5 * (1-t).^4 - 20 * t .* (1-t).^3) * P_one + ...
        (20 * t .* (1-t).^3 - 30 * t.^2 .* (1-t).^2) * P_two + ...
        (30 * t.^2 .* (1-t).^2 - 20 * t.^3 .* (1-t)) * P_three + ...
        (20 * t.^3 .* (1-t) - 5 * t.^4) * P_four + ...
        5 * t.^4 * P_five;
    
    % Compute the second derivative of the Bézier curve
    d2P_dt2 = ...
        20 * (1-t).^3 * P_zero + ...
        (-60 * (1-t).^3 + 60 * t .* (1-t).^2) * P_one + ...
        (60 * (1-t).^2 .* t - 120 * t .* (1-t).^2 + 30 * t.^2 .* (1-t)) * P_two + ...
        (60 * t .* (1-t).^2 - 90 * t.^2 .* (1-t) + 30 * t.^3) * P_three + ...
        (20 * t.^3 - 60 * t.^2 .* (1-t) + 20 * t.^3) * P_four + ...
        20 * t.^3 * P_five;
    
    % Compute the x and y components of the first derivative
    dx_dt = dP_dt(:,1);
    dy_dt = dP_dt(:,2);
    
    % Compute the x and y components of the second derivative
    d2x_dt2 = d2P_dt2(:,1);
    d2y_dt2 = d2P_dt2(:,2);
    
    % Compute the curvature
    numerator = abs(dx_dt .* d2y_dt2 - dy_dt .* d2x_dt2);
    denominator = (dx_dt.^2 + dy_dt.^2).^(3/2);
    curvature = numerator ./ denominator;
end